security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        # 1. Dev-Firewall für Profiler, etc.
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        # 2. Refresh Token Firewall (WICHTIG: Muss VOR der API-Firewall stehen!)
        refresh:
            pattern: ^/api/token/refresh$
            stateless: true
            provider: app_user_provider
            refresh_jwt:
                check_path: /api/token/refresh
                
        
        # 3. Haupt-API Firewall
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            
            # Custom Authenticators für JWT-basierte Authentifizierung
            custom_authenticators:
                - App\Security\JwtTokenAuthenticator
            
           

    access_control:
        # ========================================
        # ÖFFENTLICHE ROUTEN (Keine Authentifizierung)
        # ========================================
        
        # Auth-Endpunkte
        - { path: ^/api/login$, roles: PUBLIC_ACCESS }
        - { path: ^/api/register$, roles: PUBLIC_ACCESS, methods: [POST] }
        - { path: ^/api/token/refresh$, roles: PUBLIC_ACCESS }
        
        # Passwort-Reset
        - { path: ^/api/password/request-reset$, roles: PUBLIC_ACCESS }
        - { path: ^/api/password/reset$, roles: PUBLIC_ACCESS }
        
        # Kontaktformular & CAPTCHA
        - { path: ^/api/contact$, roles: PUBLIC_ACCESS }
        - { path: ^/api/captcha, roles: PUBLIC_ACCESS }
        
        # Öffentlicher Lesezugriff (GET) auf Posts
        - { path: ^/api/posts$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/posts/\d+$, roles: PUBLIC_ACCESS, methods: [GET] }
        
        # Öffentlicher Lesezugriff (GET) auf Kategorien
        - { path: ^/api/categories, roles: PUBLIC_ACCESS, methods: [GET] }
        
        # Health-Check (falls vorhanden)
        - { path: ^/health$, roles: PUBLIC_ACCESS }
        
        # ========================================
        # GESCHÜTZTE ROUTEN (Authentifizierung erforderlich)
        # ========================================
        
        # Posts: Schreib-, Update- und Löschzugriff
        - { path: ^/api/posts$, roles: IS_AUTHENTICATED_FULLY, methods: [POST] }
        - { path: ^/api/posts/\d+$, roles: IS_AUTHENTICATED_FULLY, methods: [PUT, PATCH, DELETE] }
        - { path: ^/api/posts/upload$, roles: IS_AUTHENTICATED_FULLY, methods: [POST] }
        
        # Kategorien: Schreib-, Update- und Löschzugriff
        - { path: ^/api/categories, roles: IS_AUTHENTICATED_FULLY, methods: [POST, PUT, PATCH, DELETE] }
        
        # Passwort ändern (nur für authentifizierte Benutzer)
        - { path: ^/api/password/change$, roles: IS_AUTHENTICATED_FULLY }
        
        # Session-Verwaltung (falls implementiert)
        - { path: ^/api/sessions, roles: IS_AUTHENTICATED_FULLY }
        
        # Logout
        - { path: ^/api/logout$, roles: IS_AUTHENTICATED_FULLY }
        
        # ========================================
        # FALLBACK: Alle anderen API-Routen sichern
        # ========================================
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4          # Minimal für bcrypt (schnellere Tests)
                time_cost: 3     # Minimal für argon2
                memory_cost: 10  # Minimal für argon2